package UnitEntity
import IUnitEntity
import Composition
import IUnitEntityManager

// ============================================================================
public class UnitEntity implements IUnitEntity
  protected unit m_unit
  private IUnitEntityManager m_entityManager
  private CompositionManager m_compositionManager

  // --------------------------------------------------------------------------
  construct (IUnitEntityManager entityManager)
    m_entityManager = entityManager

  // --------------------------------------------------------------------------
  ondestroy
  
    if (getIsAttached())
      m_entityManager.detach(this)

    if (m_compositionManager != null)
      destroy m_compositionManager
      m_compositionManager = null

  // --------------------------------------------------------------------------
  @inline
  override function getUnit() returns unit
    return m_unit

  // --------------------------------------------------------------------------
  override function getIsAttached() returns bool
    return getUnit() != null

  // --------------------------------------------------------------------------
  override function onAttached()
    skip

  // --------------------------------------------------------------------------
  override function onDetached()
    skip
  
  // --------------------------------------------------------------------------
  @inline
  override function addComponent(IComponent component) returns IComponent
    if (m_compositionManager == null)
      m_compositionManager = new CompositionManager()
    return m_compositionManager.addComponent(component)

  // --------------------------------------------------------------------------
  @inline
  override function removeComponent(IComponent component) returns bool
    if (m_compositionManager == null)
      return false
    return m_compositionManager.removeComponent(component)

  // --------------------------------------------------------------------------
  @inline
  override function getComponent(TypeId componentTypeId) returns IComponent
    return m_compositionManager != null ? m_compositionManager.getComponent(componentTypeId) : null

  // --------------------------------------------------------------------------
  function onKilled()
    setAllComponentsEnabled(false)

  // --------------------------------------------------------------------------
  protected function onUnitChanged(unit _oldUnit, unit _newUnit)
    skip

  // --------------------------------------------------------------------------
  private function setUnit(unit u)
    let oldUnit = m_unit
    let newUnit = u
    if (oldUnit != newUnit)
      changeUnit(oldUnit, newUnit)

  // --------------------------------------------------------------------------
  private function changeUnit(unit oldUnit, unit newUnit)

    // Disable and then re-enable any components that were enabled and operated
    // under the context of the old unit
    LinkedList<IComponent> enabledComponents = null
    if (m_compositionManager != null)
      enabledComponents = new LinkedList<IComponent>()
      for comp in m_compositionManager
        if (comp.getEnabled())
          enabledComponents.add(comp)
          comp.setEnabled(false)

    m_unit = newUnit
    onUnitChanged(oldUnit, newUnit)

    // Now that the backing field for getUnit() has changed, re-enable any
    // components that were enabled with the old unit, also alert them
    if (enabledComponents != null)
      for comp in enabledComponents
        comp.setEnabled(true)
        let unitComp = comp castTo UnitComponent
        if (unitComp != null)
          unitComp.onUnitChanged(oldUnit, newUnit)

      destroy enabledComponents

  // --------------------------------------------------------------------------
  private function setAllComponentsEnabled(bool enabled)
    if (m_compositionManager != null)
      for comp in m_compositionManager
        comp.setEnabled(enabled)